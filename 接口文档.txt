1/生成图片验证码
请求URL /api/v1.0/imagecode/<image_code_id>
请求方法：GET
数据格式：jpg
请求参数：
参数名         是否必须            参数说明
image_code_id   是                   图片验证码的扩展名(前端生成的UUID)

返回结果： 返回前端图片验证码，可以使用响应对象
正确：
    response = make_response(image)
    response.headers['Content-Type'] = 'image/jpg'

错误：
{
    errno=RET.DBERR,
    errmsg='保存图片验证码异常'
}
=======================================================================
2/发送短信验证码
请求方法：GET
请求URL：/api/v1.0/smscode/<mobile>?text=imagecode,id=image_code_id
数据格式:json
请求参数：
参数名      是否必须           参数说明
mobile        是               用户数据的手机号
text          是                图片验证码的内容
id            是               图片验证码的编号

返回结果：
正确：
{
    errno=RET.OK,
    errmsg='发送成功'
}
错误：
{
    errno=RET.THIRDERR,
    errmsg='发送失败'
}
=======================================================================
3/注册
请求方法：POST
请求的URL ：/api/v1.0/users
数据格式：json
请求参数：mobile,sms_code，password
参数名         是否必须            参数说明
mobile          是                   手机号
sms_code        是                   短信验证码
password        是                   密码

返回结果
正确：返回附属信息，user.to_dict()
{
    errno=RET.OK
    errmsg='OK'
    data = user.to_dict()
}
错误：
{
    errno=RET.DBERR,
    errmsg='查询用户信息异常'
}

=======================================================================
4/登录
请求方法：POST
请求URL：/api/v1.0/sessions
数据格式：json
请求参数
参数名         是否必须            参数说明
mobile          是                   用户登录输入的手机号
password        是                   用户登录输入的密码信息

返回结果：
正确{
   errno=RET.OK
   errmsg='OK'
   data={'user_id':user.id}
}
错误:
{
    errno=RET.DATAERR,
    errmsg='用户名或密码错误'
}
=======================================================================
5/获取用户信息
请求方法：GET
请求URL：/api/v1.0/user
数据格式：json
请求参数 user_id = g.user_id
参数名         是否必须            参数说明
user_id         是                   用户id信息(session从redis缓存中获取，使用g变量)
返回结果
正确
{
    errno=RET.OK,
    errmsg='OK',
    data=user.to_dict()
}
错误
{
    errno=RET.NODATA,
    errmsg='无效操作'
}
=======================================================================
6/上传用户头像
请求方法：POST
请求URL：/api/v1.0/user/avatar
数据格式：json
请求参数  avatar_url = image_url(七牛空间外链域名 + 调用七牛云上传图片返回的图片名称)
参数名         是否必须            参数说明
avatar          是                   用户上传的头像文件
user_id         是                   用户的id
返回结果
正确
{
    errno=RET.OK,
    errmsg='头像上传成功',
    data={'avatar_url':image_url}
}
错误
{
    errno=RET.THIRDERR,
    errmsg='七牛云上传失败'
}

=======================================================================
7/修改用户信息
请求方法：PUT
请求URL：/api/v1.0/user/name
数据格式：json
请求参数: user_id = g.user_id
参数名         是否必须            参数说明
name             是                 用户输入的用户名信息
返回结果
正确
{
    errno=RET.OK,
    errmsg='OK',
    data={'name':name}
}
错误
{
    errno=RET.DBERR,
    errmsg='保存用户信息失败'
}
=======================================================================
8/实名认证
请求方法：POST
请求URL：/api/v1.0/user/auth
数据格式：json
请求参数
参数名         是否必须            参数说明
real_name       是                   用户输入的真实姓名
id_card         是                   用户输入的身份证号码

返回结果
正确
{
    errno=RET.OK,
    errmsg='OK',
}
错误
{
    errno=RET.DBERR,
    errmsg='保存用户实名信息异常'
}
=======================================================================
9/获取用户实名信息
请求方法：GET
请求URL：/api/v1.0/user/auth
数据格式：json
请求参数
参数名         是否必须            参数说明
user_id          是                  用户的id信息
返回结果
正确
{
    errno=RET.OK,
    errmsg='OK',
    data=user.auth_to_dict()
}
错误
{
    errno=RET.NODATA,
    errmsg='无效操作'
}
=======================================================================
10/退出操作
请求方法：DELETE
请求URL：/api/v1.0/session
数据格式：json
请求参数 user_id = g.user_id 登录验证装饰器
参数名         是否必须            参数说明
user_id         是                   用户id
返回结果
正确
{
    errno=RET.OK,
    errmsg='OK',
}


=======================================================================
请求方法：
请求URL：/api/v1.0/
数据格式：json
请求参数
参数名         是否必须            参数说明
返回结果
正确
{
    errno=RET.OK,
    errmsg='OK',
    data={'':}
}
错误
{
    errno=RET.,
    errmsg=''
}





